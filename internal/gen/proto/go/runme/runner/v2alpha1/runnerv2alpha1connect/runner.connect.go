// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: runme/runner/v2alpha1/runner.proto

package runnerv2alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v2alpha1 "github.com/stateful/runme/internal/gen/proto/go/runme/runner/v2alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RunnerServiceName is the fully-qualified name of the RunnerService service.
	RunnerServiceName = "runme.runner.v2alpha1.RunnerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RunnerServiceExecuteProcedure is the fully-qualified name of the RunnerService's Execute RPC.
	RunnerServiceExecuteProcedure = "/runme.runner.v2alpha1.RunnerService/Execute"
)

// RunnerServiceClient is a client for the runme.runner.v2alpha1.RunnerService service.
type RunnerServiceClient interface {
	// Execute executes a program. Examine "ExecuteRequest" to explore
	// configuration options.
	//
	// It's a bidirectional stream RPC method. It expects the first
	// "ExecuteRequest" to contain details of a program to execute.
	// Subsequent "ExecuteRequest" should only contain "input_data" as
	// other fields will be ignored.
	Execute(context.Context) *connect_go.BidiStreamForClient[v2alpha1.ExecuteRequest, v2alpha1.ExecuteResponse]
}

// NewRunnerServiceClient constructs a client for the runme.runner.v2alpha1.RunnerService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRunnerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RunnerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &runnerServiceClient{
		execute: connect_go.NewClient[v2alpha1.ExecuteRequest, v2alpha1.ExecuteResponse](
			httpClient,
			baseURL+RunnerServiceExecuteProcedure,
			opts...,
		),
	}
}

// runnerServiceClient implements RunnerServiceClient.
type runnerServiceClient struct {
	execute *connect_go.Client[v2alpha1.ExecuteRequest, v2alpha1.ExecuteResponse]
}

// Execute calls runme.runner.v2alpha1.RunnerService.Execute.
func (c *runnerServiceClient) Execute(ctx context.Context) *connect_go.BidiStreamForClient[v2alpha1.ExecuteRequest, v2alpha1.ExecuteResponse] {
	return c.execute.CallBidiStream(ctx)
}

// RunnerServiceHandler is an implementation of the runme.runner.v2alpha1.RunnerService service.
type RunnerServiceHandler interface {
	// Execute executes a program. Examine "ExecuteRequest" to explore
	// configuration options.
	//
	// It's a bidirectional stream RPC method. It expects the first
	// "ExecuteRequest" to contain details of a program to execute.
	// Subsequent "ExecuteRequest" should only contain "input_data" as
	// other fields will be ignored.
	Execute(context.Context, *connect_go.BidiStream[v2alpha1.ExecuteRequest, v2alpha1.ExecuteResponse]) error
}

// NewRunnerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRunnerServiceHandler(svc RunnerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	runnerServiceExecuteHandler := connect_go.NewBidiStreamHandler(
		RunnerServiceExecuteProcedure,
		svc.Execute,
		opts...,
	)
	return "/runme.runner.v2alpha1.RunnerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RunnerServiceExecuteProcedure:
			runnerServiceExecuteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRunnerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRunnerServiceHandler struct{}

func (UnimplementedRunnerServiceHandler) Execute(context.Context, *connect_go.BidiStream[v2alpha1.ExecuteRequest, v2alpha1.ExecuteResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("runme.runner.v2alpha1.RunnerService.Execute is not implemented"))
}
